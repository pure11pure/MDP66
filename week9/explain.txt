npx expo start
------------------------------------------------------------------------------
• |app|
Emulator (Android Studio), web และ Expo Go (Client)
------------------------------------------------------------------------------
• |การติดตั้ง library และ dependencies เพื่อใช้ในการทำ Navigation ให้ครบถ้วน|
npm install @react-navigation/native
npm install react-native-screens react-native-safe-area-context
npm install @react-navigation/native-stack
------------------------------------------------------------------------------
• |ติดตั้ง react-navigation-tabs|
สำหรับ react-navigation เวอร์ชัน 6 ขึ้นไป ต้องมีการติดตั้งไลบรารีเพิ่มเติ่ม 
เพื่อทำการสร้าง Navigator ในรูปแบบต่างๆ (ในที่นี้ จะสร้าง Tab Navigator)
npm install --save @react-navigation/bottom-tabs 
ศึกษา React navigation เพิ่มเติมได้ที่ :
https://reactnavigation.org/docs/getting-started
------------------------------------------------------------------------------
• |Drawer Navigation|
เป็นการทำ navigation อีกรูปแบบหนึ่ง ที่มีลักษณะเป็น Slide bar จากด้านซ้ายของจอ

npx install @react-navigation/drawer
------------------------------------------------------------------------------
• |ติดตั้ง dependencies เพิ่มเติม|
npx install react-native-gesture-handler react-native-reanimated
------------------------------------------------------------------------------
• import { createDrawerNavigator } from "@react-navigation/drawer";
• ใช้ createDrawerNavigator() ในการสร้าง Drawer Navigator และสามารถปรับแต่ง
ค่าการแสดงผลได้ ผ่านการกำหนด options prop หรือ screenOptions (คล้ายกับ
Stack และ Bottom tab navigator)
------------------------------------------------------------------------------
• |ติดตั้ง  react-navigation-header-buttons|
npm install --save react-navigation-header-buttons
------------------------------------------------------------------------------
• |ติดตั้ง  redux และ react-redux|
npm install --save redux react-redux
    -ไลบรารีที่ช่วยบริหารจัดการสเตทสำหรับแอปพลิเคชันที่มีความซับซ้อน
    -ช่วยให้เราสามารถแชร์ข้อมูลและแชร์ฟังก์ชันระหว่างคอมโพเนนต์ได้ง่ายขึ้น
    
    Action -----------> Reducer 
       |                   |                   
    Component <--------- Store

    "Store"
        • ส่วนเก็บสเตทที่ส่วนกลาง หากมีคอมโพเนนต์ต้องการจัดการสเตทนั้น ก็สามารถส่ง Action เพื่อบอกว่าต้องการจัดการอะไร
    "Reducer"
        • ส่วนฟังก์ชันที่ใช้จัดการข้อมูลใน store เช่น เพิ่มค่า แก้ไขค่า ของสเตท
        • ฟังก์ชันที่จัดการข้อมูลใน store จะมีอาร์กิวเมนต์ 2 ตัว คือ state และ action
    "Action"
        • เป็นอ็อบเจ็กต์ที่ใช้บอก reducer ว่าต้องการจัดการข้อมูลสเตทใน store อย่างไร
        • ตัวอย่างเช่น {type: ‘UPDATE_DATA’, data: mydata} เป็นอ็อบเจ็กต์ Action ประเภท UPDATE_DATA พร้อมกับส่งข้อมูล data ไปด้วย 
        • เพื่อแจ้งกับ reducer ว่าต้องการอัพเดทข้อมูลใน store
    "Component"
        • เมื่อต้องการจัดการสเตทใน store คอมโพเนนต์จะส่ง Action ที่ต้องการ ผ่านการเรียก dispatch
        • คอมโพเนนต์สามารถอ้างถึงข้อมูลใน store ที่อัพเดทได้

  """""JavaScript: Array Methods"""""
  
        • splice() : เมธอดที่สามารถเพิ่มหรือลบอิลิเมนต์ออกจากอะเรย์ได้
        • concat() : เมธอดที่ท าการสร้างอะเรย์ใหม่ โดยเกิดจากการรวมอะเรย์ที่มีอยู่กับอะเรย์หรือข้อมูลอื่นๆ
        • map() : เมธอดที่สร้างอะเรย์ขึ้นใหม่ ด้วยการท าฟังก์ชันกับอิลิเมนต์แต่ละตัวในอะเรย์
        • filter() : เมธอดที่สร้างอะเรย์ใหม่ให้กับอิลิเมนต์ของอะเรย์ที่ผ่านการตรวจสอบตามเงื่อนไข
        • every() : เมธอดที่ตรวจสอบว่าอิลิเมนต์ในอะเรย์ผ่านการตรวจสอบตามเงื่อนไขทั้งหมดหรือไม่
        • some() : เมธอดที่ตรวจสอบว่ามีอิลิเมนต์บางตัวในอะเรย์ที่ผ่านการตรวจสอบเงื่อนไขหรือไม่
        • indexOf() : เมธอดที่ค้นหาอิลิเมนต์ที่ต้องการในอะเรย์ และคืนค่าต าแหน่งของอิลิเมนต์นั้นออกมา
        • find() : เมธอดที่คืนค่าอิลิเมนต์ตัวแรกในอะเรย์ที่ผ่านการตรวจสอบเงื่อนไขที่ก าหนด
        • findIndex() : เมธอดที่คืนค่าต าแหน่งของอิลิเมนต์ตัวแรกในอะเรย์ที่ผ่านการตรวจสอบเงื่อนไขที่ก าหนด
        • length : property เก็บขนาดของอะเรย์